import * as Rx from 'rx';
import * as Immutable from 'immutable';
export declare const compositeDriver: Driver<State>;
export declare type State = Immutable.Map<string, any>;
export interface Signal {
    tag: any;
    data: any;
    name: string;
}
export interface Driver<TState> {
    (state: TState, signal: Signal, onError?: (state: TState) => (error: Error) => void): TState;
}
export interface SignalError {
    signal: Signal;
    state: any;
    error: Error;
}
export interface AttachDriverData<TState> {
    path: string;
    driver: Driver<TState>;
}
export interface SignalEmitter<T> {
    (data?: T): void;
    signal$: Rx.Observable<Signal>;
}
export declare function createSignal<T>(name: string): SignalEmitter<T>;
export declare function attachDriver<TState>(data: AttachDriverData<TState>): Rx.Observable<TState>;
export declare function __resetState__(): void;
export declare const __internal: {
    SWITCHABLE_STATE$$: Rx.Subject<Rx.Observable<Immutable.Map<string, any>>>;
    connectedLiveState$: Rx.Observable<Immutable.Map<string, any>>;
    connectedLiveSignal$: Rx.Observable<Signal>;
    connectedError$: Rx.Observable<SignalError>;
};
export declare const CompositeDriver: Driver<Immutable.Map<string, any>>;
export declare const state$: Rx.Observable<Immutable.Map<string, any>>;
export declare const signal$: Rx.Observable<Signal>;
export declare const error$: Rx.Observable<SignalError>;
export declare const createIntent: typeof createSignal;
export declare const DynamicCompositeDriver: Driver<Immutable.Map<string, any>>;
export declare type Intent = Signal;
