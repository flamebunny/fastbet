"use strict";
var Rx = require("rx");
var stream_driver_1 = require("./stream-driver");
var move$ = new Rx.Subject();
var history = [];
stream_driver_1.__internal.connectedLiveState$.subscribe(history.push);
var history$ = stream_driver_1.__internal.connectedLiveState$.scan(function (acc, state) { acc.push(state); return acc; }, []);
exports.pointer$ = Rx.Observable
    .combineLatest(move$, history$, function (direction, history) { return ({ direction: direction, history: history }); })
    .scan(function (index, x) { return Math.min(x.history.length, Math.max(0, index + x.direction)); }, 1);
var controlledState$ = Rx.Observable.combineLatest(exports.pointer$, history$, function (pointer, history) { return history[pointer]; });
function timemachineOn() {
    stream_driver_1.__internal.SWITCHABLE_STATE$$.onNext(controlledState$);
}
exports.timemachineOn = timemachineOn;
function timemachineOff() {
    stream_driver_1.__internal.SWITCHABLE_STATE$$.onNext(stream_driver_1.__internal.connectedLiveState$);
}
exports.timemachineOff = timemachineOff;
function next() {
    move$.onNext(1);
}
exports.next = next;
function back() {
    move$.onNext(-1);
}
exports.back = back;
