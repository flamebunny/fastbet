"use strict";
var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var React = require("react");
var jsonMarkup = require("json-markup");
var driver = require("./stream-driver");
var Rx = require("rx");
var immutable_1 = require("immutable");
var deep_diff_1 = require("deep-diff");
function connectAndReplay(input$) {
    // casting to any is a bit of a hack, but it seems the typescript definition is missing
    var replay$ = input$.replay(null, 1);
    replay$.connect();
    return replay$;
}
function JSON(obj) {
    return React.createElement("div", { dangerouslySetInnerHTML: { __html: jsonMarkup(obj) } });
}
function Diff(_a) {
    var lhs = _a.lhs, rhs = _a.rhs;
    var map = immutable_1.Map();
    var diff = deep_diff_1.diff(map.merge(lhs).toJS(), map.merge(rhs).toJS());
    if (!diff)
        return null;
    return React.createElement("div", { className: "l-faux-table l-table-fixed w100" }, diff.map(function (change, index) {
        var path = change.path.map(function (name) { return React.createElement("span", { className: "state-diff-path-segment" }, name); });
        switch (change.kind) {
            case "E":
                return React.createElement("div", { className: "l-faux-row" },
                    React.createElement("div", { className: "l-cell-6 l-faux-cell  pl1em pr1em ", style: { backgroundColor: "dcb8f5", verticalAlign: "middle" } },
                        " ",
                        path),
                    React.createElement("div", { className: "l-cell-3 l-faux-cell  pl1em pr1em ", style: { backgroundColor: 'd7f5b8' } },
                        " ",
                        JSON(change.rhs)),
                    React.createElement("div", { className: "l-cell-3 l-faux-cell  pl1em pr1em ", style: { backgroundColor: 'f5c2b8' } },
                        " ",
                        JSON(change.lhs)));
            case "D":
                return React.createElement("div", { className: "l-faux-row", style: { backgroundColor: 'f5c2b8' } },
                    React.createElement("div", { className: "l-cell-6 l-faux-cell pl1em pr1em ", style: { verticalAlign: "middle" } },
                        " ",
                        path),
                    React.createElement("div", { className: "l-cell-3 l-faux-cell" }, " "),
                    React.createElement("div", { className: "l-cell-3 l-faux-cell   pl1em pr1em  " },
                        " ",
                        JSON(change.lhs)));
            case "N":
                return React.createElement("div", { className: "l-faux-row", style: { backgroundColor: 'd7f5b8' } },
                    React.createElement("div", { className: "l-cell-6 l-faux-cell  pl1em pr1em ", style: { verticalAlign: "middle" } },
                        " ",
                        path),
                    React.createElement("div", { className: "l-cell-3 l-faux-cell  pl1em pr1em  ", style: { backgroundColor: 'd7f5b8' } },
                        " ",
                        JSON(change.rhs)),
                    React.createElement("div", { className: "l-cell-3 l-faux-cell" }));
        }
    }));
}
function StateDiff() {
    var log$ = connectAndReplay(Rx.Observable
        .zip(driver.__internal.connectedLiveSignal$, driver.__internal.connectedLiveState$, function (signal, state) { return ({ signal: signal, state: state }); })
        .scan(function (acc, row) { return [row].concat(acc); }, []));
    var App = (function (_super) {
        __extends(App, _super);
        function App() {
            var _this = _super.call(this) || this;
            _this.state = { log: [] };
            return _this;
        }
        App.prototype.componentWillMount = function () {
            var _this = this;
            log$.subscribe(function (log) { return _this.setState({ log: log }); });
        };
        App.prototype.render = function () {
            var log = this.state.log;
            return React.createElement("dl", { className: "state-diff" }, log.map(function (l, i) { return [React.createElement("dt", null, l.signal.name), React.createElement("dd", null,
                    React.createElement(Diff, { lhs: (log[i + 1] || { state: null }).state, rhs: l.state }))]; }));
        };
        return App;
    }(React.Component));
    return App;
}
exports.StateDiff = StateDiff;
